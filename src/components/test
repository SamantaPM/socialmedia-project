import React, { useRef, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Spinner from './Spinner';
import { AiOutlineCloudUpload } from 'react-icons/ai';
import { MdDelete } from 'react-icons/md';
import { categories } from '../utils/data';
import { uploadImage, createPin, deleteImage } from '../sanity/client';

import useAuthStore from '../store/authStore';
import InputField from './InputField';

const CreatePin = () => {
  const navigate = useNavigate();
  const { userProfile } = useAuthStore();
  const titleRef = useRef(null);
  const aboutRef = useRef(null);
  const destinationRef = useRef(null);
  const categoryRef = useRef(null);
  const [loading, setLoading] = useState(false);
  const [errorImage, setErrorImage] = useState('');
  const [errorFields, setErrorFields] = useState('');
  const [saving, setSaving] = useState(false);
  const [imgInput, setImgInput] = useState();
  const inputStyle = 'outline-none focus-within:outline-none border-b-2 border-gray-200 p-2';
  const wrapperStyle = 'flex flex-col items-center justify-center w-full h-420 border-2 border-dotted p-3';
  const imageContainerStyle = 'relative h-full w-full';
  const deleteButtonStyle = 'absolute bottom-3 right-3 p-3 bg-white rounded-full text-2xl cursor-pointer outline-none hover:shadow-md transition-all duration-500 ease-in-out';

  const onChangeImg = async (e) => {
    setLoading(true);

    try {
      const imgAsset = await uploadImage(e.target.files[0]);
      setImgInput(imgAsset);
      setLoading(false);
    } catch (error) {
      setErrorImage(error.message);
      setLoading(false);
    }
  };

  const handleSavePin = (e) => {
    e.preventDefault();
    setSaving(true);

    if (!titleRef.current.checkValidity() ||
        !aboutRef.current.checkValidity() ||
        !destinationRef.current.checkValidity() ||
        !categoryRef.current.checkValidity() || !imgInput) {
      setSaving(false);
      setErrorFields(true);
      return;
    }
    setErrorFields(false);

    createPin({
      title: titleRef.current.value,
      about: aboutRef.current.value,
      destination: destinationRef.current.value,
      category: categoryRef.current.value,
      image: imgInput,
      userProfile
    })
      .then((pin) => {
        navigate(`/pin-detail/${pin._id}`);
        setSaving(false);
      })
      .catch((error) => {
        setSaving(false);
        // Add error handling for createPin function
        console.error(error);
      });
  };

  const deleteImg = () => {
    setLoading(true);

    deleteImage(imgInput._id)
      .then(() => {
        setImgInput('');
        setLoading(false);
      });
  };

  return (
    <div className='flex flex-col mt-5 items-center '>
      {errorFields && <p className='text-red-500 mb-3 lg